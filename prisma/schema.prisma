// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sport {
  id          Int       @id @default(autoincrement())
  name        String
  main_image  String
  images      String[]
  description String
  open_time   String
  close_time  String
  slug        String    @unique
  price       PRICE
  location_id Int
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  type_id     Int
  bookings    Booking[]
  courts      Court[]
  items       Item[]
  reviews     Review[]
  location    Location  @relation(fields: [location_id], references: [id])
  type        Type      @relation(fields: [type_id], references: [id])
}

model Item {
  id          Int      @id @default(autoincrement())
  name        String
  price       String
  description String
  sport_id    Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  sport       Sport    @relation(fields: [sport_id], references: [id])
}

model Location {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  sports     Sport[]
}

model Type {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  sports     Sport[]
}

model User {
  id         Int      @id @default(autoincrement())
  first_name String
  last_name  String
  password   String
  email      String   @unique
  phone      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  faculty    String
  reviews    Review[]
}

model Review {
  id         Int    @id @default(autoincrement())
  first_name String
  last_name  String
  text       String
  rating     Float
  sport_id   Int
  user_id    Int
  sport      Sport  @relation(fields: [sport_id], references: [id])
  user       User   @relation(fields: [user_id], references: [id])
}

model Booking {
  id                Int                @id @default(autoincrement())
  number_of_people  Int
  booking_time      DateTime
  booker_email      String
  booker_phone      String
  booker_first_name String
  booker_last_name  String
  booker_occasion   String?
  booker_request    String?
  sport_id          Int
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  sport             Sport              @relation(fields: [sport_id], references: [id])
  courts            BookingsOnCourts[]
}

model Court {
  id         Int                @id @default(autoincrement())
  seats      Int
  sport_id   Int
  created_at DateTime           @default(now())
  updated_at DateTime           @updatedAt
  bookings   BookingsOnCourts[]
  sport      Sport              @relation(fields: [sport_id], references: [id])
}

model BookingsOnCourts {
  booking_id Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  court_id   Int
  booking    Booking  @relation(fields: [booking_id], references: [id])
  court      Court    @relation(fields: [court_id], references: [id])

  @@id([booking_id, court_id])
}

enum PRICE {
  CHEAP
  REGULAR
  EXPENSIVE
}
